# tests/conftest.py - Clean test configuration and fixtures
import pytest
import os
import sys
import tempfile
import json
from pathlib import Path
from unittest.mock import Mock, patch

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

@pytest.fixture(scope="session")
def temp_dir():
    """Create a temporary directory for test files"""
    with tempfile.TemporaryDirectory() as temp_dir:
        yield Path(temp_dir)

@pytest.fixture
def test_security_manager(temp_dir):
    """Create a SecurityManager instance with test directories"""
    # Import here to avoid import issues
    from auth.security import SecurityManager
    from cryptography.fernet import Fernet
    
    # Create a test security manager
    security = SecurityManager.__new__(SecurityManager)
    security.auth_file = temp_dir / "api_keys.json"
    security.rate_limit_file = temp_dir / "rate_limits.json" 
    security.audit_file = temp_dir / "security_audit.json"
    
    # Create temp directories
    security.auth_file.parent.mkdir(exist_ok=True)
    security.audit_file.parent.mkdir(exist_ok=True)
    
    # Initialize encryption with test key
    security.cipher_suite = Fernet(Fernet.generate_key())
    
    # Ensure files exist
    security._ensure_files_exist()
    
    return security

@pytest.fixture
def sample_api_key_data():
    """Sample API key data for testing"""
    return {
        "fc_test_key_123": {
            "client_name": "Test Client",
            "permissions": ["read", "write"],
            "created_at": "2025-01-01T00:00:00",
            "last_used": None,
            "active": True,
            "daily_limit": 1000,
            "monthly_limit": 30000
        }
    }

@pytest.fixture
def test_app():
    """Create a test Flask app"""
    import app
    
    # Configure for testing
    app.app.config['TESTING'] = True
    app.app.config['SECRET_KEY'] = 'test-secret-key'
    app.app.config['WTF_CSRF_ENABLED'] = False
    
    return app.app

@pytest.fixture
def test_client(test_app):
    """Create a Flask test client with mocked security"""
    with test_app.test_client() as client:
        with test_app.app_context():
            # Mock security manager
            with patch('app.SECURITY_ENABLED', True):
                with patch('app.security') as mock_security:
                    mock_security.validate_api_key.return_value = {
                        "client_name": "Test Client",
                        "permissions": ["read", "write"],
                        "active": True
                    }
                    mock_security.check_rate_limit.return_value = True
                    mock_security.log_security_event.return_value = None
                    mock_security.get_client_stats.return_value = {
                        "client_name": "Test Client",
                        "daily_usage": 0,
                        "daily_limit": 1000,
                        "remaining_today": 1000,
                        "permissions": ["read", "write"]
                    }
                    
                    yield client

@pytest.fixture
def valid_api_key():
    """Valid API key for testing"""
    return "fc_test_valid_key_12345"

@pytest.fixture
def invalid_api_key():
    """Invalid API key for testing"""
    return "fc_test_invalid_key_67890"

@pytest.fixture
def mock_stripe_payment():
    """Mock Stripe payment response"""
    mock_payment = Mock()
    mock_payment.id = "pi_test_12345"
    mock_payment.client_secret = "pi_test_12345_secret_test"
    mock_payment.status = "requires_payment_method"
    return mock_payment

@pytest.fixture
def sample_payment_data():
    """Sample payment data for testing"""
    return {
        "amount": 25.50,
        "currency": "usd", 
        "description": "Test payment"
    }

@pytest.fixture
def sample_client_data():
    """Sample client data for API key creation"""
    return {
        "client_name": "Test API Client",
        "permissions": ["read", "write"]
    }

@pytest.fixture(autouse=True)
def setup_test_env(monkeypatch):
    """Set up test environment variables"""
    monkeypatch.setenv("FLASK_SECRET_KEY", "test-secret-key")
    monkeypatch.setenv("XERO_CLIENT_ID", "test-xero-client-id")
    monkeypatch.setenv("XERO_CLIENT_SECRET", "test-xero-client-secret")
    monkeypatch.setenv("STRIPE_API_KEY", "sk_test_123")
    monkeypatch.setenv("PLAID_CLIENT_ID", "test-plaid-client")
    monkeypatch.setenv("PLAID_SECRET", "test-plaid-secret")

# Test markers
def pytest_configure(config):
    """Configure pytest with custom markers"""
    config.addinivalue_line("markers", "unit: Unit tests")
    config.addinivalue_line("markers", "integration: Integration tests")
    config.addinivalue_line("markers", "api: API endpoint tests")
    config.addinivalue_line("markers", "security: Security-related tests")
    config.addinivalue_line("markers", "slow: Slow running tests")